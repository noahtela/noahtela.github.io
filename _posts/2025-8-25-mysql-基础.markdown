---
layout:     post
title:      "mysql-基础"
subtitle:   " \"K8s\""
date:       2025-8-25 21:48:49
author:     "yangsir"
header-img: "img/bg-material.jpg"
catalog: true
tags:
    - 笔记
    - mysql



---

> “今日起，重学mysql”


<p id = "build"></p>

# mysql-基础



## 

> 数据库相关概念

- **数据库**：存储数据的仓库，数据是有组织的进行存储
- **数据库管理系统**：操纵和管理数据库的大型软件
- **SQL**：操作关系型数据库的变成语言，定义了一套操作关系型数据库统一标准

> 关系型数据库

概念：建立在关系模型基础上，由多张相互连接的二维表组成的数据库。

特点：

- 使用表存储数据，格式统一，便于维护
- 使用SQL语言操作，标准统一，使用方便

# SQL

## sql通用语法

1.sql语句可以单行或多行书写，以分号结尾。

2.sql语句可以使用空格/缩进来增强语句的可读性。

3.MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。

4.注释:

- 单行注释：--注释内容或# 注释内容(MySql特有)
- 多行注释： /* 注释内容 */

| 分类 | 说明                                                   |
| ---- | ------------------------------------------------------ |
| DDL  | 数据定义语言，用于定义数据库对象(数据库，表，字段)     |
| DML  | 数据库操作语言，用来对数据库表中的数据进行增删改       |
| DQL  | 数据查询语言，用来查询数据库中表的记录                 |
| DCL  | 数据控制语言，用来创建数据库用户、控制数据库的访问权限 |

## DDL-数据库操作

- 查询

  - 查询所有数据库

    ```sql
    show databases;
    ```

  - 查询当前数据库

    ```sql
    select database();
    ```

- 创建

  ```sql
  create database [if not exists] 数据库名 [default charset 字符集] [collate 排序规则];
  ```

- 删除

  ```sql
  drop database [if exists] 数据库名;
  ```

- 使用

  ```sql
  use 数据库名;
  ```

## DDL-表操作

- 查询

  - 查询当前数据库所有表

    ```sql
    show tables;
    ```

  - 查询表结构

    ```sql
    desc 表名;
    ```

  - 查询指定表的建表语句

    ```sql
    show create table 表名;
    ```

- 创建

  ```sql
  create table 表名(
  	字段1 字段1类型 [comment 字段1注释],
  	字段2 字段2类型 [comment 字段2注释],
  	字段3 字段3类型 [comment 字段3注释],
  	...
  	字段n 字段n类型 [comment 字段n注释]
  )[comment 表注释]
  ```

  ![image-20250827213155414](\img\linux\image-20250827213155414.png)

  ![image-20250827213609578](\img\linux\image-20250827213609578.png)

  ![image-20250827214109593](\img\linux\image-20250827214109593.png)

- 修改

  - 添加字段

    ```sql
    alter table 表名 add 字段名 类型(长度) [comment 注释] [约束];
    ```

  - 修改数据类型

    ```sql
    alter table 表名 modify 字段名 新数据类型(长度);
    ```

  - 修改字段名和字段类型

    ```sql
    alter table 表名 change 旧字段名 新字段名 类型(长度) [comment 注释] [约束];
    ```

  - 删除字段

    ```sql
    alter table 表名 drop 字段名;
    ```

  - 修改表名

    ```sql
    alter table 表名 rename auto 新表名;
    ```

- 删除

  - 删除表

  ```sql
  drop table [if exists] 表名;
  ```

  - 删除指定表，并重建

  ```sql
  truncate table 表名;
  ```



## DML-数据操作语言

用来对数据库中表的数据记录进行增删改操作

- 添加数据(insert)

  - 给指定字段添加数据

    ```sql
    insert into 表名(字段名1,字段名2....) values (值1,值2.....);
    ```

  - 给全部字段添加数据

    ```sql
    insert into 表名 values (值1,值2.....);
    ```

  - 批量添加数据

    ```sql
    insert into 表名(字段名1,字段名2....) values (值1,值2.....),(值1,值2.....),(值1,值2.....);
    insert into 表名 values (值1,值2.....),(值1,值2.....),(值1,值2.....);
    ```

  注意：

  ​	插入数据时，指定的字段顺序需要与值的顺序是一一对应的

  ​	字符串和日期型数据应该包含在引号内

  ​	插入的数据大小，应该在字段的规定范围内

- 修改数据(update)

  ```sql
  update 表名 set 字段名1=值1,字段名2=值2,...[where 条件]
  ```

  注意:修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。

- 删除数据(delete)

  ```sql
  delete from 表名 [where 条件] 
  ```

  注意：

  ​	delete语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据。

  ​	delete语句不能删除某一字段的值(可以使用update)		

## DQL-数据查询语言

用来查询数据库中表的记录

### 基础查询

```sql
select
	字段列表
from
	表名列表
where
	条件列表
group by
	分组字段列表
having
	分组后条件列表
order by
	排序字段列表
limit
	分页参数
```

查询多个字段

```sql
select 字段1，字段2，字段3... from 表名;
```

```sql
select * from 表名;
```

设置别名

```sql
select 字段1 [as 别名1]，字段2 [as 别名2]，字段3[as 别名3]... from 表名;
```



去除重复记录

```sql
select distinct 字段列表 from 表名;
```



### 条件查询

语法

```sql
select 字段列表 from 表名 where 条件列表;
```



| 比较运算符          | 功能                                   |
| ------------------- | -------------------------------------- |
| >                   | 大于                                   |
| >=                  | 大于等于                               |
| <                   | 小于                                   |
| <=                  | 小于等于                               |
| =                   | 等于                                   |
| <>或!=              | 不等于                                 |
| between......and... | 在某个范围之内(含最大和最小)           |
| in(...)             | 在in之后的列表中的值，多选一           |
| like 占位符         | 模糊匹配(_匹配单个字符，%匹配任意字符) |
| is null             | 是NULL                                 |

| 逻辑运算符 | 功能                       |
| ---------- | -------------------------- |
| and 或 &&  | 并且(多个条件同时成立)     |
| or或\|\|   | 或者(多个条件任意一个成立) |
| not或!     | 非，不是                   |



### 聚合函数

将一列数据作为一个整体，进行纵向计算。

常见聚合函数

| 函数  | 功能     |
| ----- | -------- |
| count | 统计数量 |
| max   | 最大值   |
| min   | 最小值   |
| avg   | 平均值   |
| sum   | 求和     |

用法

```sql
select 聚合函数(字段列表) from 表名;
```



### 分组查询

语法

```sql
select 字段列表 from 表名 [where 条件] group by 分组字段名 [having 分组后过滤条件];
```

where与having区别

- 执行时机不同:where是分组之前进行过滤，不满足where条件，不参与分组;而having是分组之后对结果进行过滤
- 判断条件不同:where不能对聚合函数进行判断，而having可以。

注意:

- 执行顺序:where > 聚合函数 > having
- 分组之后，查询的字段一般为聚合函数和分组函数，查询其他字段无任何意义。

### 排序查询

1、语法

```sql
select 字段列表 from 表名 order by 字段1 排序方式,字段2 排序方式;
```

2、排序方式

- asc:升序(默认)
- desc:降序

注意：如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序。

### 分页查询

1、语法

```sql
select 字段列表 from 表名 limit 起始索引,查询记录数;
```

注意

- 起始索引从0开始，起始索引=(查询页码-1)*每页显示记录数。
- 分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT。
- 如果查询的是第一页数据，起始索引可以省略，直接简写为limit 10。

## DCL-数据控制语言

用来管理数据库用户、控制数据库的访问权限

### 管理用户

- 查询用户

  ```mysql
  use mysql;
  select * from user;
  ```

- 创建用户

  ```
  create user '用户名'@'主机名' identified by '密码';
  ```

  

- 修改用户密码

  ```mysql
  alter user '用户名'@'主机名' identified with mysql_native_password by '新密码';
  ```

  

- 删除用户

  ```mysql
  drop user '用户名'@'主机名';
  ```

### 权限控制

![image-20250906155001475](\img\linux\image-20250906155001475.png)

- 查询权限

  ```mysql
  show grants for '用户名'@'主机名';
  ```

- 授予权限

  ```sql
  grant 权限列表 on 数据库名.表名 to '用户名'@'主机名';
  ```

- 撤销权限

  ```sql
  revoke 权限列表 on 数据库名.表名 from '用户名'@'主机名'
  ```

  注意:如果是所有数据库的所有表，就是`*.*`

# 函数

## 字符串函数

![image-20250906160506925](\img\linux\image-20250906160506925.png)

## 数值函数

![image-20250906161221054](\img\linux\image-20250906161221054.png)

## 日期函数

![image-20250906161703960](\img\linux\image-20250906161703960.png)

## 流程控制函数

可以在SQL语句中实现条件筛选，从而提高语句的效率

![image-20250906163532415](\img\linux\image-20250906163532415.png)

总结

![image-20250906165922423](\img\linux\image-20250906165922423.png)
